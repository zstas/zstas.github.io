---
layout: post
title:  "Make BGP work again (in VPP)"
date:   2020-02-22 17:00:00 +0300
categories: jekyll update
---

## Make some dynamic routing
In every BNG we need full stack of dynamic routing protocols: BGP, ISIS, OSPF. And there is more, we also need such daemons like LDP, BFD, PIM. But at this moment we will make only BGP works.

# Choosing the daemon
These days we have a variety of BGP daemons: FRR, Bird, GoBGP, ExaBGP - and there are only some popular ones. I decided to proceed with FRR, because it's have a special protocol to install routes to dataplane, it's called FPM (Forwarding Plane Manager).

# FPM FIB Push
FPM it's just a module for Zebra (it's like RIB daemon in FRR). To use FPM we need to listen some TCP port, and Zebra will connect and send all the FIB to us. At every change we will get full route information about route that changed. In case we lost TCP session we also will get the full FIB after the session will be established.

There are two options of how data will be encoded in these messages: Netlink and Protobuf. I like Netlink, but chose Protobuf in this case, onlu because we can generate all the boilerplate - encoding/decoding messages from bytes and all the necessary classes.

Let's see what we have here - FPM, Protobuf and of course VPP API. I write this litte programm which gets routes from Zebra and pushes it to the VPP. I named it like FIB Manager and of course you can find it on my [github](https://github.com/zstas/pppcpd).

# Run Zebra
First of all we need to run Zebra with enabled FPM module (and selected Protobuf).

Unfortunately you need to recompile FRR with this option (because in Ubuntu's repos there is only version which faults on run with these settings).

```
git clone https://github.com/FRRouting/frr.git
cd frr
git checkout frr-7.2.1
./bootstrap.sh
./configure
./configure --enable-fpm --enable-protobuf
make -j9
sudo make install
```

And now we can run Zebra in foreground mode:
```
sudo zebra -f /etc/frr/zebra.conf -u root -M fpm:protobuf -t
2020/02/23 12:32:18 warnings: ZEBRA: [EC 4043309105] Disabling MPLS support (no kernel support)
2020/02/23 12:32:18 warnings: ZEBRA: [EC 4043309078] FPM protobuf message format is deprecated and scheduled to be removed. Please convert to using netlink format or contact dev@lists.frrouting.org with your use case.
vppbuild# conf t
vppbuild(config)# fpm connection ip 127.0.0.1 port 31337
vppbuild(config)# end
vppbuild#
```

Let's run our FIB manager `sudo ./fibmgr.o` and see that you receive some routing information:
```
type: ADD_ROUTE
add_route {
  vrf_id: 0
  address_family: IPV4
  sub_address_family: UNICAST
  key {
    prefix {
      length: 0
      bytes: ""
    }
  }
  route_type: NORMAL
  protocol: KERNEL
  metric: 100
  nexthops {
    if_id {
      index: 2
    }
    address {
      v4 {
        value: 167772674
      }
    }
  }
}
```
It's just default route from the host. Later we can isolate zebra to the separate network namespace.

Add some static routes:
```
zstas@vppbuild:~$ sudo staticd -u root -t
vppbuild# conf t
vppbuild(config)# ip route 8.8.8.8/32 10.0.2.2
vppbuild(config)# ip route 8.8.8.8/32 10.0.2.3
vppbuild(config)# ip route 8.8.8.8/32 10.0.2.4
vppbuild(config)# end
```

And check in VPP:
```
DBGvpp# show ip fib 8.8.8.8/32
ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] epoch:0 flags:none locks:[default-route:1, nat-hi:2, ]
8.8.8.8/32 fib:0 index:11 locks:2
  API refs:1 src-flags:added,contributing,active,
    path-list:[17] locks:2 flags:shared, uPRF-list:15 len:1 itfs:[0, ]
      path:[18] pl-index:17 ip4 weight=1 pref=0 attached-nexthop:
        10.0.2.2 local0
      [@0]: ipv4 via 10.0.2.2 local0: mtu:9000
      path:[19] pl-index:17 ip4 weight=1 pref=0 attached-nexthop:
        10.0.2.3 local0
      [@0]: ipv4 via 10.0.2.3 local0: mtu:9000
      path:[20] pl-index:17 ip4 weight=1 pref=0 attached-nexthop:
        10.0.2.4 local0
      [@0]: ipv4 via 10.0.2.4 local0: mtu:9000
```

## Punting the control packets
But it's just an half-way to get BGP working. Also you can read more about punting in VPP [here](https://docs.fd.io/vpp/19.08/md_src_vnet_ip_punt.html).
# Options for punt
In VPP we have several options how we can punt control packets to the host.
* Router plugin
* Active punt (in unix-socket)
* Passive punt (though IP redirect)
* VCL (VPP communication library)

# Router plugin
It's an outdated and not really supported solution. This plugin just do several things:
1. Create TAP interface (in host) for each your routing interface in VPP.
2. Configure IP address and ARP entries in host network.
3. Just mirror all the traffic to the host interfaces - at this moment every routing daemon will work and install routes into host.
4. List on Netlink socket and install all the routes (which installed into the host) to VPP FIB.

But this solution is pretty "crutch". Also not many people consider this plugin is should be as part of VPP (you can find some detail about it [here](https://lists.fd.io/g/vpp-dev/topic/32309215)).

# Active punt
At this moment it's just support only UDP and sink all the traffic into the UNIX-socket file. So obviously it doesn't fit our requierments - we don't want to rewrite routing daemons much. Also we need L2, L3 and TCP packets, UDP is not very handful.

# Passive punt
Actually this is the first option which fits and moreover - a super easy solution. We can just redirect traffic destinated to the IP addresses of VPP interfaces to some TAP interface in host (sounds pretty like router plugin but much simpler).

```
DBGvpp# create tap id 0 host-ip4-addr 10.0.0.0/31 host-ns bgp-cp host-if-name bgp-cp
tap0
DBGvpp# set interface state tap0 up
DBGvpp# set interface ip address tap0 10.0.0.1/31
DBGvpp# create tap id 1 host-ip4-addr 10.0.1.0/31 host-ns external-peer host-if-name external_peer
tap1
DBGvpp# set interface state tap1 up
DBGvpp# set interface ip address tap1 10.0.1.1/31
DBGvpp# ip punt redirect add rx tap1 via 10.0.0.0 tap0
```
